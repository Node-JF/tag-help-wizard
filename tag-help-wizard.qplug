-- Information block for the plugin
PluginInfo = {
  Name = "TAG~Help Wizard",
  Version = "2.0",
  BuildVersion = "2.0.0.5",
  Id = "1c3e2ee3-a45f-4ffb-b894-8ea26a3d385b",
  Author = "Jason Foord (TAG)",
  Description = "Configure help issues that can assist your users with resolving problems."
}

width = 250 -- scalable plugin width
control_depth = 16 -- scalable control depth
control_gap = 3 -- vertical space between controls

Colors = {
    none = {0, 0, 0, 0},
    primary = {250, 218, 93},
    secondary = {236, 222, 243},
    heading = {50, 50, 50},
    label = {50, 50, 50},
    stroke = {119, 80, 169},
    black = {50, 50, 50}
}

Sizes = {
    ["Button"] = {36, control_depth},
    ["Text"] = {(width - 30) / 2, control_depth},
    ["Status"] = {width - 30, (control_depth * 2) + (control_gap * 1)},
    ["LED"] = {16, control_depth},
    ["ListBox"] = {width - 30, (control_depth * 6) + (control_gap * 5)},
    ["Image"] = {width - 30, (control_depth * 6) + (control_gap * 5)}
}

Master_Object = {{

    ["PageName"] = "Wizard",

    ["Groupings"] = {{
        ["Name"] = "Custom Messages",
        ["Depth"] = 2,
        ["Controls"] = {{
            Name = "wizard.config.message.resolved",
            PrettyName = "Wizard~Configuration~Resolved Message",
            Label = "Resolved",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 1
        }, {
            Name = "wizard.config.message.unresolved",
            PrettyName = "Wizard~Configuration~Unresolved Message",
            Label = "Unresolved",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 2
        }}

    }, {
        ["Name"] = "Controls",
        ["Depth"] = 28,
        ["Controls"] = {{
            Name = "wizard.controls.compile",
            PrettyName = "Wizard~Controls~Compile",
            Label = "Compile Issues =>",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Icon = "Refresh",
            Size = Sizes.Button,
            GridPos = 1
        },{
            Name = "wizard.controls.issue.type",
            PrettyName = "Wizard~Controls~Issue Type",
            Label = "Issue Type",
            ControlType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Style = "ComboBox",
            Size = Sizes.Text,
            GridPos = 3
        }, {
            Name = "wizard.controls.issue.list",
            PrettyName = "Wizard~Controls~Issue List",
            Label = "Issue List",
            ControlType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Style = "ListBox",
            Width = "Full",
            Size = Sizes.ListBox,
            GridPos = 4
        }, {
            Name = "wizard.controls.start",
            PrettyName = "Wizard~Controls~Start",
            Legend = "Start",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 11
        }, {
            Name = "wizard.controls.message",
            PrettyName = "Wizard~Controls~User Message",
            Label = "Message",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Status,
            Width = "Full",
            GridPos = 12
        }, {
            Name = "wizard.controls.prompt",
            PrettyName = "Wizard~Controls~User Prompt",
            Label = "Prompt",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Status,
            Width = "Full",
            GridPos = 15
        }, {
            Name = "wizard.controls.image",
            Label = "Image",
            ControlType = "Button",
            ButtonType = "Toggle",
            Size = Sizes.Image,
            Width = "Full",
            GridPos = 18
        }, {
            Name = "wizard.controls.progress.stage",
            PrettyName = "Wizard~Controls~Stage Progress",
            Label = "Progress",
            ControlType = "Knob",
            ControlUnit = "Percent",
            Min = 0,
            Max = 100,
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 26
        }, {
            Name = "wizard.controls.stage.next",
            PrettyName = "Wizard~Controls~Next Stage",
            Label = "Next Stage",
            Icon = "Fast Forward",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 27
        }, {
            Name = "wizard.controls.issue.resolved",
            PrettyName = "Wizard~Controls~Issue Resolved",
            Label = "Issue Resolved",
            Icon = "Check",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 28
        }}
    }, {
        ["Name"] = "Events",
        ["Depth"] = 3,
        ["Controls"] = {{
            Name = "wizard.events.isrunning",
            PrettyName = "Wizard~Events~Is Running",
            Label = "Wizard Is Running",
            ControlType = "Indicator",
            IndicatorType = "Led",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.LED,
            GridPos = 1
        }, {
            Name = "wizard.events.trigger.resolved",
            PrettyName = "Wizard~Events~Issue Resolved Trigger",
            Label = "Issue Resolved Trigger",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 2
        }, {
            Name = "wizard.events.trigger.unresolved",
            PrettyName = "Wizard~Events~Issue Unresolved Trigger",
            Label = "Issue Unresolved Trigger",
            ControlType = "Button",
            ButtonType = "Trigger",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 3
        }}
    }}
}, {

    ["PageName"] = "Image Store",

    ["Groupings"] = {}
},{

    ["PageName"] = "Shared Stages",

    ["Groupings"] = {}
}}

-- Define the color of the plugin object in the design
function GetColor(props)
    return Colors.primary
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
    return string.format("TAG Help Wizard [%s]", PluginInfo.Version)
end

-- Optional function used if plugin has multiple pages
function GetPages(props)
    local pages = {}
    local master = {}
    
    for i, tbl in ipairs(Master_Object) do
        table.insert(master, tbl)
    end
    
    
    for i = 1, props['Image Store Size'].Value do
        table.insert(master[2].Groupings, {
            ["Name"] = string.format("Image %d", i),
            ["Depth"] = 2,
            ["Controls"] = {{
                Name = string.format("store.image.%d.name", i),
                PrettyName = string.format("Image Store~%d~Name", i),
                Label = "Name",
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 1
            },{
              Name = string.format("store.image.%d.data", i),
              PrettyName = string.format("Image Store~%d~Data", i),
              Label = "Base64 Image Data",
              ControlType = "Text",
              PinStyle = "Both",
              UserPin = true,
              Size = Sizes.Text,
              GridPos = 2
          }}
        })
    end
    
    for stage = 1, props['Total Stages'].Value do
        table.insert(master[3].Groupings, {
            ["Name"] = string.format("Shared Stage %d", stage),
            ["Depth"] = 9,
            ["Controls"] = {{
                Name = string.format("shared.stage.%d.name", stage),
                PrettyName = string.format("Shared Stages~Name~%d", stage),
                Label = "Name",
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 1
            }, {
                Name = string.format("shared.stage.%d.message", stage),
                PrettyName = string.format("Shared Stages~Message~%d", stage),
                Label = "Message",
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 2
            }, {
                Name = string.format("shared.stage.%d.prompt.action", stage),
                PrettyName = string.format("Shared Stages~Action Prompt~%d", stage),
                Label = "Action Prompt",
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 3
            }, {
                Name = string.format("shared.stage.%d.prompt.resolution", stage),
                PrettyName = string.format("Shared Stages~Resolution Prompt~%d", stage),
                Label = "Resolution Prompt",
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 4
            }, {
                Name = string.format("shared.stage.%d.image", stage),
                PrettyName = string.format("Shared Stages~Image~%d", stage),
                Label = "Image",
                ControlType = "Text",
                Style = "ComboBox",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 5
            }, {
                Name = string.format("shared.stage.%d.delay.action", stage),
                PrettyName = string.format("Shared Stages~Action Delay~%d", stage),
                Label = "Delay Between Steps",
                ControlType = "Knob",
                ControlUnit = "Integer",
                Min = 1,
                Max = 10,
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Button,
                GridPos = 6
            }, {
                Name = string.format("shared.stage.%d.delay.confirmation", stage),
                PrettyName = string.format("Shared Stages~Confirmation Delay~%d", stage),
                Label = "Wait Time",
                ControlType = "Knob",
                ControlUnit = "Integer",
                Min = 0,
                Max = 60,
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Button,
                GridPos = 7
            }, {
                Name = string.format("shared.stage.%d.logicinput", stage),
                PrettyName = string.format("Shared Stages~Logic Input~%d", stage),
                ControlType = "Button",
                ButtonType = "Toggle",
                PinStyle = "Input",
                Label = "Logic Input",
                UserPin = true,
                Size = Sizes.Button,
                GridPos = 8
            }, {
                Name = string.format("shared.stage.%d.action.trigger", stage),
                PrettyName = string.format("Shared Stages~Action Trigger~%d", stage),
                ControlType = "Button",
                ButtonType = "Trigger",
                PinStyle = "Output",
                Label = "Action Trigger",
                UserPin = true,
                Size = Sizes.Button,
                GridPos = 9
            }}
        })
    end
    
    for i = 1, props['Total Issues'].Value do
    
        local tbl = {
            ["PageName"] = string.format("Issue %d", i),
    
            ["Groupings"] = {{
                ["Name"] = "Configuration",
                ["Depth"] = 3,
                ["Controls"] = {{
                    Name = string.format("issue.%d.enable", i),
                    PrettyName = string.format("Issue %d~Enable", i),
                    Label = "Enable",
                    ControlType = "Button",
                    ButtonType = "Toggle",
                    PinStyle = "Both",
                    UserPin = true,
                    Size = Sizes.Button,
                    GridPos = 1
                }, {
                    Name = string.format("issue.%d.category", i),
                    PrettyName = string.format("Issue %d~Category", i),
                    Label = "Issue Category",
                    ControlType = "Text",
                    PinStyle = "Both",
                    UserPin = true,
                    Size = Sizes.Text,
                    GridPos = 2
                }, {
                    Name = string.format("issue.%d.description", i),
                    PrettyName = string.format("Issue %d~Description", i),
                    Label = "Description",
                    ControlType = "Text",
                    PinStyle = "Both",
                    UserPin = true,
                    Size = Sizes.Text,
                    GridPos = 3
                }}
            }}
        }
    
        local controls = {}
        for stage = 1, props['Total Stages'].Value do
    
            table.insert(controls, {
                    Name = string.format("issue.%d.stage.%d.useshared", i, stage),
                    PrettyName = string.format("Issue %d~Use Shared Stage~%d", i, stage),
                    Label = string.format("Stage %d", stage),
                    ControlType = "Text",
                    Style = "ComboBox",
                    PinStyle = "Both",
                    UserPin = true,
                    Size = Sizes.Text,
                    Position = (width-15) - Sizes.Text[1] - Sizes.Button[1],
                    GridPos = stage
                })
                
                table.insert(controls, {
                    Name = string.format("issue.%d.stage.%d.skip", i, stage),
                    PrettyName = string.format("Issue %d~Skip Stage~%d", i, stage),
                    ControlType = "Button",
                    ButtonType = "Toggle",
                    PinStyle = "Output",
                    Legend = "Skip",
                    UserPin = true,
                    Size = Sizes.Button,
                    GridPos = stage
                })
    
        end
    
        table.insert(tbl.Groupings, {
            ["Name"] = "Stages",
            ["Depth"] = props['Total Stages'].Value,
            ["Controls"] = controls
        })
    
        table.insert(master, tbl)
    end
    for i, tbl in ipairs(master) do
      table.insert(pages, {name = tbl.PageName})
    end
    return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
    local model = {}
    return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
    local props = {}
    table.insert(props, {
      Name = "Image Store Size",
      Type = "integer",
      Min = 2,
      Max = 100,
      Value = 5
    })
    
    table.insert(props, {
      Name = "Total Stages",
      Type = "integer",
      Min = 2,
      Max = 100,
      Value = 10
    })
    
    table.insert(props, {
      Name = "Total Issues",
      Type = "integer",
      Min = 2,
      Max = 100,
      Value = 5
    })
    
    table.insert(props, {
      Name = "Stages per Issue",
      Type = "integer",
      Min = 2,
      Max = 20,
      Value = 10
    })
    
    table.insert(props, {
      Name = "Confirmation Timeout",
      Type = "integer",
      Min = 15,
      Max = 120,
      Value = 60
    })
    return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
    local pins = {}
    return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
    return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
    local components = {}
    return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
    local wiring = {}
    return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
    local ctls = {}
    local master = {}
    
    for i, tbl in ipairs(Master_Object) do
        table.insert(master, tbl)
    end
    
    
    for i = 1, props['Image Store Size'].Value do
        table.insert(master[2].Groupings, {
            ["Name"] = string.format("Image %d", i),
            ["Depth"] = 2,
            ["Controls"] = {{
                Name = string.format("store.image.%d.name", i),
                PrettyName = string.format("Image Store~%d~Name", i),
                Label = "Name",
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 1
            },{
              Name = string.format("store.image.%d.data", i),
              PrettyName = string.format("Image Store~%d~Data", i),
              Label = "Base64 Image Data",
              ControlType = "Text",
              PinStyle = "Both",
              UserPin = true,
              Size = Sizes.Text,
              GridPos = 2
          }}
        })
    end
    
    for stage = 1, props['Total Stages'].Value do
        table.insert(master[3].Groupings, {
            ["Name"] = string.format("Shared Stage %d", stage),
            ["Depth"] = 9,
            ["Controls"] = {{
                Name = string.format("shared.stage.%d.name", stage),
                PrettyName = string.format("Shared Stages~Name~%d", stage),
                Label = "Name",
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 1
            }, {
                Name = string.format("shared.stage.%d.message", stage),
                PrettyName = string.format("Shared Stages~Message~%d", stage),
                Label = "Message",
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 2
            }, {
                Name = string.format("shared.stage.%d.prompt.action", stage),
                PrettyName = string.format("Shared Stages~Action Prompt~%d", stage),
                Label = "Action Prompt",
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 3
            }, {
                Name = string.format("shared.stage.%d.prompt.resolution", stage),
                PrettyName = string.format("Shared Stages~Resolution Prompt~%d", stage),
                Label = "Resolution Prompt",
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 4
            }, {
                Name = string.format("shared.stage.%d.image", stage),
                PrettyName = string.format("Shared Stages~Image~%d", stage),
                Label = "Image",
                ControlType = "Text",
                Style = "ComboBox",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 5
            }, {
                Name = string.format("shared.stage.%d.delay.action", stage),
                PrettyName = string.format("Shared Stages~Action Delay~%d", stage),
                Label = "Delay Between Steps",
                ControlType = "Knob",
                ControlUnit = "Integer",
                Min = 1,
                Max = 10,
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Button,
                GridPos = 6
            }, {
                Name = string.format("shared.stage.%d.delay.confirmation", stage),
                PrettyName = string.format("Shared Stages~Confirmation Delay~%d", stage),
                Label = "Wait Time",
                ControlType = "Knob",
                ControlUnit = "Integer",
                Min = 0,
                Max = 60,
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Button,
                GridPos = 7
            }, {
                Name = string.format("shared.stage.%d.logicinput", stage),
                PrettyName = string.format("Shared Stages~Logic Input~%d", stage),
                ControlType = "Button",
                ButtonType = "Toggle",
                PinStyle = "Input",
                Label = "Logic Input",
                UserPin = true,
                Size = Sizes.Button,
                GridPos = 8
            }, {
                Name = string.format("shared.stage.%d.action.trigger", stage),
                PrettyName = string.format("Shared Stages~Action Trigger~%d", stage),
                ControlType = "Button",
                ButtonType = "Trigger",
                PinStyle = "Output",
                Label = "Action Trigger",
                UserPin = true,
                Size = Sizes.Button,
                GridPos = 9
            }}
        })
    end
    
    for i = 1, props['Total Issues'].Value do
    
        local tbl = {
            ["PageName"] = string.format("Issue %d", i),
    
            ["Groupings"] = {{
                ["Name"] = "Configuration",
                ["Depth"] = 3,
                ["Controls"] = {{
                    Name = string.format("issue.%d.enable", i),
                    PrettyName = string.format("Issue %d~Enable", i),
                    Label = "Enable",
                    ControlType = "Button",
                    ButtonType = "Toggle",
                    PinStyle = "Both",
                    UserPin = true,
                    Size = Sizes.Button,
                    GridPos = 1
                }, {
                    Name = string.format("issue.%d.category", i),
                    PrettyName = string.format("Issue %d~Category", i),
                    Label = "Issue Category",
                    ControlType = "Text",
                    PinStyle = "Both",
                    UserPin = true,
                    Size = Sizes.Text,
                    GridPos = 2
                }, {
                    Name = string.format("issue.%d.description", i),
                    PrettyName = string.format("Issue %d~Description", i),
                    Label = "Description",
                    ControlType = "Text",
                    PinStyle = "Both",
                    UserPin = true,
                    Size = Sizes.Text,
                    GridPos = 3
                }}
            }}
        }
    
        local controls = {}
        for stage = 1, props['Total Stages'].Value do
    
            table.insert(controls, {
                    Name = string.format("issue.%d.stage.%d.useshared", i, stage),
                    PrettyName = string.format("Issue %d~Use Shared Stage~%d", i, stage),
                    Label = string.format("Stage %d", stage),
                    ControlType = "Text",
                    Style = "ComboBox",
                    PinStyle = "Both",
                    UserPin = true,
                    Size = Sizes.Text,
                    Position = (width-15) - Sizes.Text[1] - Sizes.Button[1],
                    GridPos = stage
                })
                
                table.insert(controls, {
                    Name = string.format("issue.%d.stage.%d.skip", i, stage),
                    PrettyName = string.format("Issue %d~Skip Stage~%d", i, stage),
                    ControlType = "Button",
                    ButtonType = "Toggle",
                    PinStyle = "Output",
                    Legend = "Skip",
                    UserPin = true,
                    Size = Sizes.Button,
                    GridPos = stage
                })
    
        end
    
        table.insert(tbl.Groupings, {
            ["Name"] = "Stages",
            ["Depth"] = props['Total Stages'].Value,
            ["Controls"] = controls
        })
    
        table.insert(master, tbl)
    end
    for i, page in ipairs(master) do
      for i, grouping in ipairs(page.Groupings) do
          for i, control in ipairs(grouping.Controls) do
              table.insert(ctls, control)
          end
      end
    end
    return ctls
end

-- Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
    local master = {}
    
    for i, tbl in ipairs(Master_Object) do
        table.insert(master, tbl)
    end
    
    
    for i = 1, props['Image Store Size'].Value do
        table.insert(master[2].Groupings, {
            ["Name"] = string.format("Image %d", i),
            ["Depth"] = 2,
            ["Controls"] = {{
                Name = string.format("store.image.%d.name", i),
                PrettyName = string.format("Image Store~%d~Name", i),
                Label = "Name",
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 1
            },{
              Name = string.format("store.image.%d.data", i),
              PrettyName = string.format("Image Store~%d~Data", i),
              Label = "Base64 Image Data",
              ControlType = "Text",
              PinStyle = "Both",
              UserPin = true,
              Size = Sizes.Text,
              GridPos = 2
          }}
        })
    end
    
    for stage = 1, props['Total Stages'].Value do
        table.insert(master[3].Groupings, {
            ["Name"] = string.format("Shared Stage %d", stage),
            ["Depth"] = 9,
            ["Controls"] = {{
                Name = string.format("shared.stage.%d.name", stage),
                PrettyName = string.format("Shared Stages~Name~%d", stage),
                Label = "Name",
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 1
            }, {
                Name = string.format("shared.stage.%d.message", stage),
                PrettyName = string.format("Shared Stages~Message~%d", stage),
                Label = "Message",
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 2
            }, {
                Name = string.format("shared.stage.%d.prompt.action", stage),
                PrettyName = string.format("Shared Stages~Action Prompt~%d", stage),
                Label = "Action Prompt",
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 3
            }, {
                Name = string.format("shared.stage.%d.prompt.resolution", stage),
                PrettyName = string.format("Shared Stages~Resolution Prompt~%d", stage),
                Label = "Resolution Prompt",
                ControlType = "Text",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 4
            }, {
                Name = string.format("shared.stage.%d.image", stage),
                PrettyName = string.format("Shared Stages~Image~%d", stage),
                Label = "Image",
                ControlType = "Text",
                Style = "ComboBox",
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Text,
                GridPos = 5
            }, {
                Name = string.format("shared.stage.%d.delay.action", stage),
                PrettyName = string.format("Shared Stages~Action Delay~%d", stage),
                Label = "Delay Between Steps",
                ControlType = "Knob",
                ControlUnit = "Integer",
                Min = 1,
                Max = 10,
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Button,
                GridPos = 6
            }, {
                Name = string.format("shared.stage.%d.delay.confirmation", stage),
                PrettyName = string.format("Shared Stages~Confirmation Delay~%d", stage),
                Label = "Wait Time",
                ControlType = "Knob",
                ControlUnit = "Integer",
                Min = 0,
                Max = 60,
                PinStyle = "Both",
                UserPin = true,
                Size = Sizes.Button,
                GridPos = 7
            }, {
                Name = string.format("shared.stage.%d.logicinput", stage),
                PrettyName = string.format("Shared Stages~Logic Input~%d", stage),
                ControlType = "Button",
                ButtonType = "Toggle",
                PinStyle = "Input",
                Label = "Logic Input",
                UserPin = true,
                Size = Sizes.Button,
                GridPos = 8
            }, {
                Name = string.format("shared.stage.%d.action.trigger", stage),
                PrettyName = string.format("Shared Stages~Action Trigger~%d", stage),
                ControlType = "Button",
                ButtonType = "Trigger",
                PinStyle = "Output",
                Label = "Action Trigger",
                UserPin = true,
                Size = Sizes.Button,
                GridPos = 9
            }}
        })
    end
    
    for i = 1, props['Total Issues'].Value do
    
        local tbl = {
            ["PageName"] = string.format("Issue %d", i),
    
            ["Groupings"] = {{
                ["Name"] = "Configuration",
                ["Depth"] = 3,
                ["Controls"] = {{
                    Name = string.format("issue.%d.enable", i),
                    PrettyName = string.format("Issue %d~Enable", i),
                    Label = "Enable",
                    ControlType = "Button",
                    ButtonType = "Toggle",
                    PinStyle = "Both",
                    UserPin = true,
                    Size = Sizes.Button,
                    GridPos = 1
                }, {
                    Name = string.format("issue.%d.category", i),
                    PrettyName = string.format("Issue %d~Category", i),
                    Label = "Issue Category",
                    ControlType = "Text",
                    PinStyle = "Both",
                    UserPin = true,
                    Size = Sizes.Text,
                    GridPos = 2
                }, {
                    Name = string.format("issue.%d.description", i),
                    PrettyName = string.format("Issue %d~Description", i),
                    Label = "Description",
                    ControlType = "Text",
                    PinStyle = "Both",
                    UserPin = true,
                    Size = Sizes.Text,
                    GridPos = 3
                }}
            }}
        }
    
        local controls = {}
        for stage = 1, props['Total Stages'].Value do
    
            table.insert(controls, {
                    Name = string.format("issue.%d.stage.%d.useshared", i, stage),
                    PrettyName = string.format("Issue %d~Use Shared Stage~%d", i, stage),
                    Label = string.format("Stage %d", stage),
                    ControlType = "Text",
                    Style = "ComboBox",
                    PinStyle = "Both",
                    UserPin = true,
                    Size = Sizes.Text,
                    Position = (width-15) - Sizes.Text[1] - Sizes.Button[1],
                    GridPos = stage
                })
                
                table.insert(controls, {
                    Name = string.format("issue.%d.stage.%d.skip", i, stage),
                    PrettyName = string.format("Issue %d~Skip Stage~%d", i, stage),
                    ControlType = "Button",
                    ButtonType = "Toggle",
                    PinStyle = "Output",
                    Legend = "Skip",
                    UserPin = true,
                    Size = Sizes.Button,
                    GridPos = stage
                })
    
        end
    
        table.insert(tbl.Groupings, {
            ["Name"] = "Stages",
            ["Depth"] = props['Total Stages'].Value,
            ["Controls"] = controls
        })
    
        table.insert(master, tbl)
    end
    local graphics, layout, control_slots = {}, {}, {}
    
    local page_index = props["page_index"].Value
    
    -- starting depth
    local total_depth = 0
    
    -- dynamically create graphics boxes
    for i, grouping in ipairs(master[page_index].Groupings) do
    
        total_depth = total_depth + control_depth
    
        depth = grouping.Depth
    
        len = string.len(grouping.Name)
    
        table.insert(graphics, {
            Type = "GroupBox",
            Fill = Colors.primary,
            StrokeColor = Colors.stroke,
            StrokeWidth = 2,
            CornerRadius = 8,
            HTextAlign = "Left",
            Position = {
                0,
                total_depth
            },
            Size = {
                width,
                40 + (depth * control_depth) + ((depth - 1) * control_gap)
            }
        })
    
        -- generate control slots per group box depth and control_depth requirement
    
        grouping["Control_Slots"] = {}
    
        for n = 1, grouping.Depth do
    
            grouping["Control_Slots"][n] = ((total_depth + 25) + (control_depth * (n - 1)) + ((n - 1) * control_gap))
    
        end
    
        -- dynamically create groupbox labels
        table.insert(graphics, {
            Type = "Label",
            Text = master[page_index].Groupings[i].Name,
            -- Size = 11,
            Color = {
                255,
                255,
                255
            },
            Fill = Colors.heading,
            StrokeWidth = 0,
            CornerRadius = 4,
            Position = {
                15,
                total_depth - 8
            },
            Size = {
                len <= 12 and 90 or len <= 20 and 140 or len <= 30 and 170,
                18
            },
            Font = "Montserrat",
            FontStyle = "Medium"
        })
    
        total_depth = total_depth + 40 + ((depth * control_depth) + ((depth - 1) * control_gap))
    
    end
    
    -- width of the group box minus borders
    local box_width = (width - 60)
    
    for i, grouping in ipairs(master[page_index].Groupings) do
    
        local Slots = grouping.Control_Slots
    
        for _, ctl in ipairs(grouping.Controls) do
    
            local pos_x = nil
            local pos_y = nil
    
            if (ctl.Width and (ctl.Width == "Full")) then
                pos_x = 15
                pos_y = (Slots[ctl.GridPos] + control_depth + control_gap)
            else
                if (ctl.Position) then
                    pos_x = ctl.Position
                else
                    pos_x = (width - 15) - ctl.Size[1]
                end
                pos_y = Slots[ctl.GridPos]
            end
    
            layout[ctl.Name] = {
                PrettyName = ctl.PrettyName,
                Legend = ctl.Legend,
                Style = ctl.Style,
                Position = {
                    pos_x,
                    pos_y
                },
                Size = ctl.Size,
                Font = "Droid Sans",
                FontSize = 8
            }
    
            if ctl.Label then
                table.insert(graphics, {
                    Type = "Label",
                    Text = ctl.Label,
                    HTextAlign = "Left",
                    Color = Colors.label,
                    Font = "Droid Sans",
                    Position = {
                        15,
                        (Slots[ctl.GridPos] ~= nil) and Slots[ctl.GridPos] or Slots[#Slots]
                    },
                    Size = {
                        (ctl.Width == "Full") and (width - 30) or (width - 30) - ctl.Size[1],
                        control_depth
                    }
                })
            end
    
        end
    
    end
    return layout, graphics
end

-- Start event based logic
if Controls then

    rapidjson = require('rapidjson')

    Issue = {
        currentStage = 1
    }
    
    function Issue:nextStage()
        self.currentStage = self.currentStage + 1
        return self
    end
    
    function Issue:executeStage(stage)
        GStore.progressTimer:Stop()
        GStore.userConfirmationTimer:Stop()
        setRunning(true)
    
        if (not self.stages[self.currentStage]) then return self:unResolved() end
    
    
        -- get shared stage if not 'None'
        -- local sharedStage = Controls[string.format("issue.%d.stage.%d.useshared", self.index, self.currentStage)]
        stage = replaceStageWithSharedStage(stage)
    
        if stage.skip.Boolean or
        stage.message.String == "" or
        stage.actionPrompt.String == "" or
        stage.resolutionPrompt.String == "" then
            print(string.format("Skipping Stage [%d] - Configure Text Fields or Turn off 'Skip' Mode", self.currentStage))
            self:nextStage()
            self:executeStage(self.stages[self.currentStage])
            disableControls(true)
            return
        end
    
        print(string.format("Executing Stage [%d]", self.currentStage))
    
        disableControls(true)
        setPrompt()
        setImage()
        setProgress()
        setMessage(stage.message.String)
    
        -- local logicInput = stage.logicInput
    
        GStore.actionTimer:Stop()
    
        if stage.logicInput.Boolean == true then
    
            GStore.actionTimer.EventHandler = function(t)
                t:Stop()
                setPrompt(stage.actionPrompt.String)
                local imageData = getImageByName(stage.image.String)
                setImage(imageData)
                stage.actionTrigger:Trigger()
                
                GStore.userConfirmationTimer.EventHandler = function(t)
                    t:Stop()
                    print("!! [Wizard Timed Out]")
                    initialize()
                end
    
                if stage.confirmationDelay.Value > 0 then -- create utility function and reference GStore progressTimer correctly
    
                    local fps = 60
                    GStore.progressTimer.EventHandler = function(t)
                        local currentPosition = Controls["wizard.controls.progress.stage"].Position
                        local increment = ((1 / fps) / stage.confirmationDelay.Value)
                        setProgress(currentPosition + increment)
    
                        if stage.logicInput.Boolean == false then
                            t:Stop()
                            setProgress(1)
                            disableControls(false)
                            GStore.userConfirmationTimer:Start(Properties['Confirmation Timeout'].Value)
                            print("!! [Logic Indicates Issue if Fixed - Setting Progress to Complete]")
                            print("Waiting for User Confirmation...")
                            return
                        end
    
                        if currentPosition >= 1 then
                            t:Stop()
                            disableControls(false)
                            GStore.userConfirmationTimer:Start(Properties['Confirmation Timeout'].Value)
                            print("!! [Progress Timer Complete]")
                            print("Waiting for User Confirmation...")
                            return
                        end
                    end
    
                    print('!! [Starting Progress Timer]')
                    GStore.progressTimer:Start((1 / fps))
                else
                    disableControls(false)
                    GStore.userConfirmationTimer:Start(Properties['Confirmation Timeout'].Value)
                end
            end
    
        else
    
            GStore.actionTimer.EventHandler = function(t)
                t:Stop()
                setPrompt(stage.resolutionPrompt.String)
                Timer.CallAfter(function()
                    self:nextStage()
                    self:executeStage(self.stages[self.currentStage])
                    print("Auto-Executing Next Stage")
                end, 1) -- needs to be a custom delay, disappears before user can read the resolution message.
            end
    
        end
    
        GStore.actionTimer:Start(stage.actionDelay.Value)
    
        Controls["wizard.controls.stage.next"].EventHandler = function()
            self:nextStage()
            self:executeStage(self.stages[self.currentStage])
            disableControls(true)
        end
    
        Controls["wizard.controls.issue.resolved"].EventHandler = function()
            self:resolved()
            disableControls(true)
        end
    end
    
    function Issue:resolved()
        GStore.progressTimer:Stop()
        GStore.userConfirmationTimer:Stop()
        print(string.format('Issue Resolved at Stage [%d]', self.currentStage))
        setMessage(Controls["wizard.config.message.resolved"].String)
        disableControls(true)
        setPrompt()
        setImage()
        setProgress()
        Controls["wizard.events.trigger.resolved"]:Trigger()
        Timer.CallAfter(function() setRunning(false) end, 3)
    end
    
    function Issue:unResolved()
        print(string.format('Issue Unresolved at Stage [%d]', self.currentStage - 1))
        setMessage(Controls["wizard.config.message.unresolved"].String)
        disableControls(true)
        setPrompt()
        setImage()
        setProgress()
        Controls["wizard.events.trigger.unresolved"]:Trigger()
        Timer.CallAfter(function() setRunning(false) end, 3)
    end
    
    function Issue:new(o)
        o = o or {} -- create object if user does not provide one
        setmetatable(o, self)
        self.__index = self
        return o
    end

    function disableControls(bool)
        Controls["wizard.controls.stage.next"].IsDisabled = bool
        Controls["wizard.controls.issue.resolved"].IsDisabled = bool
    end
    
    function setImage(data)
        local data = data or ""
        Controls["wizard.controls.image"].Legend = rapidjson.encode({
            DrawChrome = false,
            IconData = data
        })
    end
    
    function setDefaultCustomMessages()
        if Controls["wizard.config.message.resolved"].String == "" then
            Controls["wizard.config.message.resolved"].String = "Great! Have a nice day."
        end
        if Controls["wizard.config.message.unresolved"].String == "" then
            Controls["wizard.config.message.unresolved"].String = "This issue could not be resolved. Please call technical support."
        end
    end
    
    function setMessage(message)
        local message = message or ""
        Controls["wizard.controls.message"].String = message
    end
    
    function setPrompt(prompt)
        local prompt = prompt or ""
        Controls["wizard.controls.prompt"].String = prompt
    end
    
    function setProgress(value)
        local value = value or 0
        Controls["wizard.controls.progress.stage"].Position = value
    end
    
    function setRunning(state)
        local state = state or false
        Controls["wizard.events.isrunning"].Boolean = state
    end
    
    function setCategoryChoices()
        local choices = {}
        for category, list in pairs(GStore.issues) do table.insert(choices, category) end
        Controls["wizard.controls.issue.type"].Choices = choices
    end
    
    function compileIssuesList()
        local choices = {}
        for i, item in ipairs(GStore.issues[Controls["wizard.controls.issue.type"].String]) do
            table.insert(choices, {
                Text = item.description,
                index = i
            })
        end
        Controls["wizard.controls.issue.list"].Choices = choices
    end
    
    function resetIssueType()
        Controls["wizard.controls.issue.type"].String = "Select an Issue Type..."
        setCategoryChoices()
    end
    
    function resetIssueList()
        Controls["wizard.controls.issue.list"].Choices = {}
        Controls["wizard.controls.issue.list"].String = ""
        GStore.issues = {}
    end
    
    function addImageToStore(imageName, imageData)
        if imageName == "" or imageData == "" then return end
        table.insert(GStore.images, {
            name = imageName,
            data = imageData
        })
    end
    
    function getImageChoices()
        local choices = {"None"}
        for i, tbl in ipairs(GStore.images) do
            table.insert(choices, tbl.name)
        end
        return choices
    end
    
    function getSharedStageChoices()
        local choices = {"None"}
        for i = 1, Properties["Number of Shared Stages"].Value do
            table.insert(choices, {
                Text = string.format("Shared Stage %d", i),
                index = i
            })
        end
        return choices
    end
    
    function getImageByName(imageName)
        for i, tbl in ipairs(GStore.images) do
            if imageName == tbl.name then return tbl.data end
        end
        if imageName == "None" or imageName == "" then return "" end
    end
    
    function addIssueToStore(description, category, index, stages)
        if description == "" then return end
        if category == "" then return end
    
        table.insert(GStore.issues[category], Issue:new({
            description = description,
            category = category,
            index = index,
            stages = stages
        }))
    end

    GStore = {
        issues = {},
        progressTimer = Timer.New(),
        actionTimer = Timer.New(),
        userConfirmationTimer = Timer.New(),
        images = {},
        sharedStages = {}
    }
    
    function initialize()
        disableControls(true)
        setPrompt()
        setImage()
        setProgress()
        setMessage()
        setRunning()
        setDefaultCustomMessages()
        GStore.progressTimer:Stop()
        GStore.actionTimer:Stop()
        GStore.userConfirmationTimer:Stop()
        compileImageStore()
        -- compileSharedStages()
        -- setSharedStageChoices()
        getIssues()
        resetIssueType()
    end
    
    function compileImageStore()
        GStore.images = {}
        for i = 1, Properties["Image Store Size"].Value do
            local imageName = Controls[string.format("store.image.%d.name", i)].String
            local imageData = Controls[string.format("store.image.%d.data", i)].String
            addImageToStore(imageName, imageData)
        end
        print("[Image Store Compiled]")
        -- print(string.format("Image Store:\n\n%s", rapidjson.encode(GStore.images, {
        --     pretty = true
        -- })))
        setChoices()
    end
    
    function setChoices()
        local imageChoices = getImageChoices()
        local sharedStageChoices = getSharedStageChoices()
    
        for issue = 1, Properties["Number of Issues"].Value do
            for stage = 1, Properties["Number of Stages"].Value do
                Controls[string.format("issue.%d.stage.%d.image", issue, stage)].Choices = imageChoices
                if Controls[string.format("issue.%d.stage.%d.image", issue, stage)].String == "" then
                    Controls[string.format("issue.%d.stage.%d.image", issue, stage)].String = imageChoices[1]
                end
                Controls[string.format("issue.%d.stage.%d.useshared", issue, stage)].Choices = sharedStageChoices
                if Controls[string.format("issue.%d.stage.%d.useshared", issue, stage)].String == "" then
                    Controls[string.format("issue.%d.stage.%d.useshared", issue, stage)].String = sharedStageChoices[1]
                end
            end
        end
    
        for stage = 1, Properties["Number of Shared Stages"].Value do
            local imageName = Controls[string.format("shared.stage.%d.image", stage)].String
            Controls[string.format("shared.stage.%d.image", stage)].Choices = imageChoices
            if Controls[string.format("shared.stage.%d.image", stage)].String == "" then
                Controls[string.format("shared.stage.%d.image", stage)].String = imageChoices[1]
            end
        end
    
        validateChoices()
    end
    
    function validateChoices()
        for issue = 1, Properties["Number of Issues"].Value do
            for stage = 1, Properties["Number of Stages"].Value do
                local imageName = Controls[string.format("issue.%d.stage.%d.image", issue, stage)].String
                Controls[string.format("issue.%d.stage.%d.image", issue, stage)].Color =
                    getImageByName(imageName) and "" or "Red"
    
                local sharedStageString = Controls[string.format("issue.%d.stage.%d.useshared", issue, stage)].String
                if sharedStageString == "None" then
                    Controls[string.format("issue.%d.stage.%d.useshared", issue, stage)].Color = ""
                else
                    sharedStageString = rapidjson.decode(sharedStageString)
                    local sharedStageId = sharedStageString.index
                    local sharedStageControl = Controls[string.format("shared.stage.%d.message", sharedStageId)]
                    Controls[string.format("issue.%d.stage.%d.useshared", issue, stage)].Color = sharedStageControl and "" or "Red"
                end
                
            end
        end
    
        for stage = 1, Properties["Number of Shared Stages"].Value do
            local imageName = Controls[string.format("shared.stage.%d.image", stage)].String
            Controls[string.format("shared.stage.%d.image", stage)].Color = getImageByName(imageName) and "" or "Red"
        end
    end
    
    function getIssues()
        resetIssueList()
        for issue = 1, Properties["Number of Issues"].Value do
    
            if Controls[string.format("issue.%d.enable", issue)].Boolean then
    
                local issueCategory = Controls[string.format("issue.%d.category", issue)].String
                GStore.issues[issueCategory] = GStore.issues[issueCategory] or {}
    
                local stages = {}
                for stage = 1, Properties["Number of Stages"].Value do
    
                    table.insert(stages, {
                        skip = Controls[string.format("issue.%d.stage.%d.skip", issue, stage)],
                        useShared = Controls[string.format("issue.%d.stage.%d.useshared", issue, stage)],
                        message = Controls[string.format("issue.%d.stage.%d.message", issue, stage)],
                        actionPrompt = Controls[string.format("issue.%d.stage.%d.prompt.action", issue, stage)],
                        resolutionPrompt = Controls[string.format("issue.%d.stage.%d.prompt.resolution", issue, stage)],
                        confirmationDelay = Controls[string.format("issue.%d.stage.%d.delay.confirmation", issue, stage)],
                        actionDelay = Controls[string.format("issue.%d.stage.%d.delay.action", issue, stage)],
                        image = Controls[string.format("issue.%d.stage.%d.image", issue, stage)],
                        logicInput = Controls[string.format("issue.%d.stage.%d.logicinput", issue, stage)],
                        actionTrigger = Controls[string.format("issue.%d.stage.%d.action.trigger", issue, stage)]
                    })
                end
    
                addIssueToStore(Controls[string.format("issue.%d.description", issue)].String,
                    Controls[string.format("issue.%d.category", issue)].String, issue, stages)
    
            else
                print(string.format("!! Issue [%d] is not Enabled", issue))
            end
    
        end
        print("[Issues Compiled]")
        -- print(string.format("Issues:\n\n%s", rapidjson.encode(GStore.issues, {
        --     pretty = true
        -- })))
    end
    
    function replaceStageWithSharedStage(stage)
        if stage.useShared.String ~= "None" then
            local sharedStage = rapidjson.decode(stage.useShared.String).index
    
            if not Controls[string.format("shared.stage.%s.message", sharedStage)] then
                print("!! [Shared Stage not Valid - Cannot Replace Current Stage with Shared Stage]")
                return stage
            end
    
            print(string.format("!! Using Shared Stage [%d] Instead", sharedStage))
            stage = {
                skip = stage.skip,
                message = Controls[string.format("shared.stage.%s.message", sharedStage)],
                actionPrompt = Controls[string.format("shared.stage.%s.prompt.action", sharedStage)],
                resolutionPrompt = Controls[string.format("shared.stage.%s.prompt.resolution", sharedStage)],
                logicInput = Controls[string.format("shared.stage.%s.logicinput", sharedStage)],
                actionTrigger = Controls[string.format("shared.stage.%s.action.trigger", sharedStage)],
                image = Controls[string.format("shared.stage.%s.image", sharedStage)],
                actionDelay = Controls[string.format("shared.stage.%s.delay.action", sharedStage)],
                confirmationDelay = Controls[string.format("shared.stage.%s.delay.confirmation", sharedStage)]
            }
        end
        return stage
    end
    

    for i = 1, Properties["Image Store Size"].Value do
      Controls[string.format("store.image.%d.name", i)].EventHandler = compileImageStore
      Controls[string.format("store.image.%d.data", i)].EventHandler = compileImageStore
    end
    
    for issue = 1, Properties["Number of Issues"].Value do
      for stage = 1, Properties["Number of Stages"].Value do
          Controls[string.format("issue.%d.stage.%d.image", issue, stage)].EventHandler = validateChoices
          Controls[string.format("issue.%d.stage.%d.useshared", issue, stage)].EventHandler = validateChoices
      end
    end
    
    Controls["wizard.config.message.resolved"].EventHandler = setDefaultCustomMessages
    Controls["wizard.config.message.unresolved"].EventHandler = setDefaultCustomMessages
    Controls["wizard.controls.compile"].EventHandler = initialize
    
    Controls["wizard.controls.issue.type"].EventHandler = function(c)
      if (not GStore.issues[c.String]) then return print('!! [No Issue Type Found]') end
      Controls["wizard.controls.issue.list"].String = ""
      compileIssuesList()
    end
    
    Controls["wizard.controls.start"].EventHandler = function()
      local issue = rapidjson.decode(Controls["wizard.controls.issue.list"].String)
      if not issue then return print("!! No Issue Selected") end -- guard clause
      print(string.format("Starting Wizard: Selected Issue [%s]", Controls["wizard.controls.issue.list"].String))
      local issueIndex = issue.index
      local issueType = Controls["wizard.controls.issue.type"].String
      local issueObject = GStore.issues[issueType][issueIndex]
      issueObject.currentStage = 1
      issueObject:executeStage(issueObject.stages[issueObject.currentStage])
    end

    initialize()
end
